// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: server.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoatQClient is the client API for GoatQ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoatQClient interface {
	// Produce writes a message to a goatq topic.
	ProduceMessage(ctx context.Context, in *ProduceRequest, opts ...grpc.CallOption) (*ProduceResponse, error)
	// Batch Produce writes a message to a goatq topic.
	ProduceMessageBatch(ctx context.Context, in *ProduceBatchRequest, opts ...grpc.CallOption) (*ProduceBatchResponse, error)
	// Consume reads a message from a topic and optionally acknowledges a
	ConsumeMessage(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (*ConsumeResponse, error)
	// Produce writes a message to a goatq topic.
	ProducePartitionMessage(ctx context.Context, in *ProducePartRequest, opts ...grpc.CallOption) (*ProducePartResponse, error)
	// Produce writes a message to a goatq topic.
	ProducePartitionMessageBatch(ctx context.Context, in *ProduceBatchRequest, opts ...grpc.CallOption) (*ProduceBatchResponse, error)
	// Consume reads a message from a topic and optionally acknowledges a
	ConsumePartitionMessage(ctx context.Context, in *ConsumePartRequest, opts ...grpc.CallOption) (*ConsumePartResponse, error)
	// Streams Consume reads a message from a topic and streams
	ConsumePartitionMessageStream(ctx context.Context, in *ConsumePartRequest, opts ...grpc.CallOption) (GoatQ_ConsumePartitionMessageStreamClient, error)
	CreateTopic(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TopicResponse, error)
	DeleteTopic(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TopicResponse, error)
	// Lists all topics and metadata with optional metadata for the partitions of the topic
	ListTopics(ctx context.Context, in *ListTopicRequest, opts ...grpc.CallOption) (*ListTopicResponse, error)
	// Fetches topic metadata and optional metadata for the partitions of the topic
	GetTopicMetadata(ctx context.Context, in *GetTopicMetadataRequest, opts ...grpc.CallOption) (*GetTopicMetadataResponse, error)
}

type goatqClient struct {
	cc grpc.ClientConnInterface
}

func NewGoatQClient(cc grpc.ClientConnInterface) GoatQClient {
	return &goatqClient{cc}
}

func (c *goatqClient) ProduceMessage(ctx context.Context, in *ProduceRequest, opts ...grpc.CallOption) (*ProduceResponse, error) {
	out := new(ProduceResponse)
	err := c.cc.Invoke(ctx, "/GoatQ/ProduceMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goatqClient) ProduceMessageBatch(ctx context.Context, in *ProduceBatchRequest, opts ...grpc.CallOption) (*ProduceBatchResponse, error) {
	out := new(ProduceBatchResponse)
	err := c.cc.Invoke(ctx, "/GoatQ/ProduceMessageBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goatqClient) ConsumeMessage(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (*ConsumeResponse, error) {
	out := new(ConsumeResponse)
	err := c.cc.Invoke(ctx, "/GoatQ/ConsumeMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goatqClient) ProducePartitionMessage(ctx context.Context, in *ProducePartRequest, opts ...grpc.CallOption) (*ProducePartResponse, error) {
	out := new(ProducePartResponse)
	err := c.cc.Invoke(ctx, "/GoatQ/ProducePartitionMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goatqClient) ProducePartitionMessageBatch(ctx context.Context, in *ProduceBatchRequest, opts ...grpc.CallOption) (*ProduceBatchResponse, error) {
	out := new(ProduceBatchResponse)
	err := c.cc.Invoke(ctx, "/GoatQ/ProducePartitionMessageBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goatqClient) ConsumePartitionMessage(ctx context.Context, in *ConsumePartRequest, opts ...grpc.CallOption) (*ConsumePartResponse, error) {
	out := new(ConsumePartResponse)
	err := c.cc.Invoke(ctx, "/GoatQ/ConsumePartitionMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goatqClient) ConsumePartitionMessageStream(ctx context.Context, in *ConsumePartRequest, opts ...grpc.CallOption) (GoatQ_ConsumePartitionMessageStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &GoatQ_ServiceDesc.Streams[0], "/GoatQ/ConsumePartitionMessageStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &goatqConsumePartitionMessageStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GoatQ_ConsumePartitionMessageStreamClient interface {
	Recv() (*ConsumePartResponse, error)
	grpc.ClientStream
}

type goatqConsumePartitionMessageStreamClient struct {
	grpc.ClientStream
}

func (x *goatqConsumePartitionMessageStreamClient) Recv() (*ConsumePartResponse, error) {
	m := new(ConsumePartResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *goatqClient) CreateTopic(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TopicResponse, error) {
	out := new(TopicResponse)
	err := c.cc.Invoke(ctx, "/GoatQ/CreateTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goatqClient) DeleteTopic(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TopicResponse, error) {
	out := new(TopicResponse)
	err := c.cc.Invoke(ctx, "/GoatQ/DeleteTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goatqClient) ListTopics(ctx context.Context, in *ListTopicRequest, opts ...grpc.CallOption) (*ListTopicResponse, error) {
	out := new(ListTopicResponse)
	err := c.cc.Invoke(ctx, "/GoatQ/ListTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goatqClient) GetTopicMetadata(ctx context.Context, in *GetTopicMetadataRequest, opts ...grpc.CallOption) (*GetTopicMetadataResponse, error) {
	out := new(GetTopicMetadataResponse)
	err := c.cc.Invoke(ctx, "/GoatQ/GetTopicMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoatQServer is the server API for GoatQ service.
// All implementations must embed UnimplementedGoatQServer
// for forward compatibility
type GoatQServer interface {
	// Produce writes a message to a goatq topic.
	ProduceMessage(context.Context, *ProduceRequest) (*ProduceResponse, error)
	// Batch Produce writes a message to a goatq topic.
	ProduceMessageBatch(context.Context, *ProduceBatchRequest) (*ProduceBatchResponse, error)
	// Consume reads a message from a topic and optionally acknowledges a
	ConsumeMessage(context.Context, *ConsumeRequest) (*ConsumeResponse, error)
	// Produce writes a message to a goatq topic.
	ProducePartitionMessage(context.Context, *ProducePartRequest) (*ProducePartResponse, error)
	// Produce writes a message to a goatq topic.
	ProducePartitionMessageBatch(context.Context, *ProduceBatchRequest) (*ProduceBatchResponse, error)
	// Consume reads a message from a topic and optionally acknowledges a
	ConsumePartitionMessage(context.Context, *ConsumePartRequest) (*ConsumePartResponse, error)
	// Streams Consume reads a message from a topic and streams
	ConsumePartitionMessageStream(*ConsumePartRequest, GoatQ_ConsumePartitionMessageStreamServer) error
	CreateTopic(context.Context, *TopicRequest) (*TopicResponse, error)
	DeleteTopic(context.Context, *TopicRequest) (*TopicResponse, error)
	// Lists all topics and metadata with optional metadata for the partitions of the topic
	ListTopics(context.Context, *ListTopicRequest) (*ListTopicResponse, error)
	// Fetches topic metadata and optional metadata for the partitions of the topic
	GetTopicMetadata(context.Context, *GetTopicMetadataRequest) (*GetTopicMetadataResponse, error)
	mustEmbedUnimplementedGoatQServer()
}

// UnimplementedGoatQServer must be embedded to have forward compatible implementations.
type UnimplementedGoatQServer struct {
}

func (UnimplementedGoatQServer) ProduceMessage(context.Context, *ProduceRequest) (*ProduceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProduceMessage not implemented")
}
func (UnimplementedGoatQServer) ProduceMessageBatch(context.Context, *ProduceBatchRequest) (*ProduceBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProduceMessageBatch not implemented")
}
func (UnimplementedGoatQServer) ConsumeMessage(context.Context, *ConsumeRequest) (*ConsumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumeMessage not implemented")
}
func (UnimplementedGoatQServer) ProducePartitionMessage(context.Context, *ProducePartRequest) (*ProducePartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProducePartitionMessage not implemented")
}
func (UnimplementedGoatQServer) ProducePartitionMessageBatch(context.Context, *ProduceBatchRequest) (*ProduceBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProducePartitionMessageBatch not implemented")
}
func (UnimplementedGoatQServer) ConsumePartitionMessage(context.Context, *ConsumePartRequest) (*ConsumePartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumePartitionMessage not implemented")
}
func (UnimplementedGoatQServer) ConsumePartitionMessageStream(*ConsumePartRequest, GoatQ_ConsumePartitionMessageStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ConsumePartitionMessageStream not implemented")
}
func (UnimplementedGoatQServer) CreateTopic(context.Context, *TopicRequest) (*TopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopic not implemented")
}
func (UnimplementedGoatQServer) DeleteTopic(context.Context, *TopicRequest) (*TopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopic not implemented")
}
func (UnimplementedGoatQServer) ListTopics(context.Context, *ListTopicRequest) (*ListTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopics not implemented")
}
func (UnimplementedGoatQServer) GetTopicMetadata(context.Context, *GetTopicMetadataRequest) (*GetTopicMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicMetadata not implemented")
}
func (UnimplementedGoatQServer) mustEmbedUnimplementedGoatQServer() {}

// UnsafeGoatQServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoatQServer will
// result in compilation errors.
type UnsafeGoatQServer interface {
	mustEmbedUnimplementedGoatQServer()
}

func RegisterGoatQServer(s grpc.ServiceRegistrar, srv GoatQServer) {
	s.RegisterService(&GoatQ_ServiceDesc, srv)
}

func _GoatQ_ProduceMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProduceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoatQServer).ProduceMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoatQ/ProduceMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoatQServer).ProduceMessage(ctx, req.(*ProduceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoatQ_ProduceMessageBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProduceBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoatQServer).ProduceMessageBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoatQ/ProduceMessageBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoatQServer).ProduceMessageBatch(ctx, req.(*ProduceBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoatQ_ConsumeMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoatQServer).ConsumeMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoatQ/ConsumeMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoatQServer).ConsumeMessage(ctx, req.(*ConsumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoatQ_ProducePartitionMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProducePartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoatQServer).ProducePartitionMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoatQ/ProducePartitionMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoatQServer).ProducePartitionMessage(ctx, req.(*ProducePartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoatQ_ProducePartitionMessageBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProduceBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoatQServer).ProducePartitionMessageBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoatQ/ProducePartitionMessageBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoatQServer).ProducePartitionMessageBatch(ctx, req.(*ProduceBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoatQ_ConsumePartitionMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumePartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoatQServer).ConsumePartitionMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoatQ/ConsumePartitionMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoatQServer).ConsumePartitionMessage(ctx, req.(*ConsumePartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoatQ_ConsumePartitionMessageStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumePartRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GoatQServer).ConsumePartitionMessageStream(m, &goatqConsumePartitionMessageStreamServer{stream})
}

type GoatQ_ConsumePartitionMessageStreamServer interface {
	Send(*ConsumePartResponse) error
	grpc.ServerStream
}

type goatqConsumePartitionMessageStreamServer struct {
	grpc.ServerStream
}

func (x *goatqConsumePartitionMessageStreamServer) Send(m *ConsumePartResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GoatQ_CreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoatQServer).CreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoatQ/CreateTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoatQServer).CreateTopic(ctx, req.(*TopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoatQ_DeleteTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoatQServer).DeleteTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoatQ/DeleteTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoatQServer).DeleteTopic(ctx, req.(*TopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoatQ_ListTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoatQServer).ListTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoatQ/ListTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoatQServer).ListTopics(ctx, req.(*ListTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoatQ_GetTopicMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoatQServer).GetTopicMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoatQ/GetTopicMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoatQServer).GetTopicMetadata(ctx, req.(*GetTopicMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoatQ_ServiceDesc is the grpc.ServiceDesc for GoatQ service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoatQ_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GoatQ",
	HandlerType: (*GoatQServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProduceMessage",
			Handler:    _GoatQ_ProduceMessage_Handler,
		},
		{
			MethodName: "ProduceMessageBatch",
			Handler:    _GoatQ_ProduceMessageBatch_Handler,
		},
		{
			MethodName: "ConsumeMessage",
			Handler:    _GoatQ_ConsumeMessage_Handler,
		},
		{
			MethodName: "ProducePartitionMessage",
			Handler:    _GoatQ_ProducePartitionMessage_Handler,
		},
		{
			MethodName: "ProducePartitionMessageBatch",
			Handler:    _GoatQ_ProducePartitionMessageBatch_Handler,
		},
		{
			MethodName: "ConsumePartitionMessage",
			Handler:    _GoatQ_ConsumePartitionMessage_Handler,
		},
		{
			MethodName: "CreateTopic",
			Handler:    _GoatQ_CreateTopic_Handler,
		},
		{
			MethodName: "DeleteTopic",
			Handler:    _GoatQ_DeleteTopic_Handler,
		},
		{
			MethodName: "ListTopics",
			Handler:    _GoatQ_ListTopics_Handler,
		},
		{
			MethodName: "GetTopicMetadata",
			Handler:    _GoatQ_GetTopicMetadata_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConsumePartitionMessageStream",
			Handler:       _GoatQ_ConsumePartitionMessageStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server.proto",
}
